[{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"table-of-contents","dir":"Articles","previous_headings":"","what":"Table of Contents","title":"Solving a word funnel programming challenge","text":"Introduction Installation Part 1 Prompt Example Output Solution Tests Performance Part 1 Bonus 1 Prompt Example Output External Datasets Solution Roxygen Comments Support Functions Back Solution Search Algorithms Binary Search Hash Table Set Benchmark Part 1 Bonus 2 Prompt Solution Part 2 Prompt Example Output Solution Recursion Tail Call Optimization Rcpp Benchmark Python Part 2 Bonus Solution Part 2 Bonus 2 Solution Python Conclusion Generated tocgen","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Solving a word funnel programming challenge","text":"package solves two reddit r/dailyprogrammer challenges: word funnel 1 word funnel 2. using pedagogical tool explore advanced R concepts. Concepts include: Recursion Closures Pipes (|>) Applying functions collections (map-like operations) Passing functions functions returning functions functions Including Rcpp package Identifying performance bottlenecks R code rewriting C++ Passing around pointers C++ objects within R session using Rcpp::Xptr() Implicit conversion R types C++ primitive, standard library, standard template library (STL) types Comparing performance various search algorithms, including linear, binary, set membership, hashmap membership. Using C++ standard library gain access variety container types algorithms available base R Using non-standard R data types (hashtab()) improve performance Package-oriented project compendium Creating package datasets tests augment compendium Documenting supporting functions using Roxygen Vignettes project write-ups using Rmarkdown (document) toy problems provide just enough complexity warrant package-oriented project compendium showcase strengths, remaining simple enough get lost project details. challenges also easy understand sufficient depth can implemented naive way sophisticated way compare performance.","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Solving a word funnel programming challenge","text":"play along home, install package following. need build tools . also need load libraries.","code":"if (!requireNamespace(\"remotes\", quietly = TRUE)) install.packages(\"remotes\") remotes::install_github(\"pegeler/dailyprogrammer/366-word-funnel-r-pkg\") library(funnel) library(testthat)"},{"path":[]},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"prompt","dir":"Articles","previous_headings":"Part 1","what":"Prompt","title":"Solving a word funnel programming challenge","text":"Given two strings letters, determine whether second can made first removing one letter. remaining letters must stay order.","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"example-output","dir":"Articles","previous_headings":"Part 1","what":"Example Output","title":"Solving a word funnel programming challenge","text":"","code":"funnel(\"leave\", \"eave\") => true funnel(\"reset\", \"rest\") => true funnel(\"dragoon\", \"dragon\") => true funnel(\"eave\", \"leave\") => false funnel(\"sleet\", \"lets\") => false funnel(\"skiff\", \"ski\") => false"},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"solution","dir":"Articles","previous_headings":"Part 1","what":"Solution","title":"Solving a word funnel programming challenge","text":"trivial case, can assured result FALSE number characters second string one less first. Otherwise, need examine string indexing . R, can index single string character vector, index single character string. approach split string using strplit(). likely cause fairly significant performance hit language like Python C++ result memory allocations two new character vectors (plus list contain ). mention overhead split. challenge can fairly easily completed R efficient. Rcpp implementation radically simpler. Note Rcpp automatically convert single-element R character vector C++ standard library’s string type std::string. , can access element string using [] operator comparisons. Adding Rcpp function project quick using usethis::use_rcpp(\"funnel\"). automatically set quite bit necessary Rcpp infrastructure project provided additional instructions. , ’s almost simple just writing code calling R. extra steps exporting functions intend use R session make available public API, outside scope conversation.","code":"r_funnel <- function(a, b) {   # If nchar is not n - 1 then it is definitely wrong   if (nchar(a) != nchar(b) + 1) return(FALSE)    # Fragment each word into character vector   strings <- strsplit(c(a, b), character(0))    # Remove each character one by one and find out the resulting vector matches b   any(     vapply(       seq_along(strings[[1]]),       \\(i) all(strings[[1]][-i] == strings[[2]]),       logical(1L)     )   ) } bool cpp_funnel(const std::string &a, const std::string &b) {   size_t b_len = b.size();   if (a.size() != b_len + 1) return false;    bool skipped = false;    for(size_t i=0, j=0; j < b_len;) {     if (a[i] != b[j]) {       if (skipped) return false;       skipped = true;       i++;     }     else i++, j++;   }    return true; }"},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"tests","dir":"Articles","previous_headings":"Part 1","what":"Tests","title":"Solving a word funnel programming challenge","text":"first instance demonstrate advantage using package-oriented project compendia. can include automated tests ensure functions performing expected run tests touch button. Assuming project already set package, running usethis::use_test(\"part1\") set testthat project create new test file modify. can put following tests file run Ctrl + Shft + T run tests. especially useful TDD enthusiasts incorporate unit testing project development work. Yay! implementations return expected results provided example data. 🥳 NB, creating packages, recommend Hadley Wickam’s R Packages usethis package. NB, Although explicitly show tests subsequent challenge text, package fact include tests example output provided reddit post.","code":"test_that(\"R funnel works\", {   r_funnel(\"leave\", \"eave\")     |> expect_true()   r_funnel(\"reset\", \"rest\")     |> expect_true()   r_funnel(\"dragoon\", \"dragon\") |> expect_true()   r_funnel(\"eave\", \"leave\")     |> expect_false()   r_funnel(\"sleet\", \"lets\")     |> expect_false()   r_funnel(\"skiff\", \"ski\")      |> expect_false() }) #> Test passed 🥇  test_that(\"Rcpp funnel works\", {   cpp_funnel(\"leave\", \"eave\")     |> expect_true()   cpp_funnel(\"reset\", \"rest\")     |> expect_true()   cpp_funnel(\"dragoon\", \"dragon\") |> expect_true()   cpp_funnel(\"eave\", \"leave\")     |> expect_false()   cpp_funnel(\"sleet\", \"lets\")     |> expect_false()   cpp_funnel(\"skiff\", \"ski\")      |> expect_false() }) #> Test passed 🎊"},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"performance","dir":"Articles","previous_headings":"Part 1","what":"Performance","title":"Solving a word funnel programming challenge","text":"’s good able solve problem pure R since various reasons might want get Rcpp involved. example, overhead get Rcpp set . compilation step requires build tools target machine, always available default. C++ code “lower level”, can make difficult reason problem vs “higher level” language like R designed expressive specific domain. R portable shareable. times either advantages outweigh disadvantages disadvantages minimized due external factors. R lots tricks hood get good performance, going C++ always silver bullet. places R might need help string handling, recursion loops (sometimes), data structures algorithms. disadvantage needing build tools minimized shipping code CRAN since compile code target may build tools pre-installed. Packaging code strategy making code shareable. challenge string handling problem, selected especially can one R’s weaker performance domains. (’ll see little later, challenge several features play well R’s weaknesses, makes overall excellent candidate using Rcpp.) might expect significant difference performance benchmarking, indeed see ~16 fold speed gain using C++. significant function expected used frequently, package meant wide distribution needs used inside tight loop (example part exhaustive search large dataset).","code":"bench::mark(   r_funnel(\"sleet\", \"lets\"),   cpp_funnel(\"sleet\", \"lets\") ) #> # A tibble: 2 × 6 #>   expression                            min  median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                       <bch:tm> <bch:t>     <dbl> <bch:byt>    <dbl> #> 1 \"r_funnel(\\\"sleet\\\", \\\"lets\\\")\"    9.74µs  12.1µs    74282.        0B     22.3 #> 2 \"cpp_funnel(\\\"sleet\\\", \\\"lets\\\"… 748.09ns 816.1ns   973600.    2.49KB      0  bench::mark(   r_funnel(\"dragoon\", \"dragon\"),   cpp_funnel(\"dragoon\", \"dragon\") ) #> # A tibble: 2 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                         <bch:t> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 \"r_funnel(\\\"dragoon\\\", \\\"dragon\\\"…  12.1µs   15µs    59605.        0B     23.9 #> 2 \"cpp_funnel(\\\"dragoon\\\", \\\"dragon…   766ns  841ns  1042288.        0B      0"},{"path":[]},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"prompt-1","dir":"Articles","previous_headings":"Part 1 Bonus 1","what":"Prompt","title":"Solving a word funnel programming challenge","text":"Given string, find words enable1 word list can made removing one letter string. two possible letters can remove make word, count . Ordering output words doesn’t matter.","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"example-output-1","dir":"Articles","previous_headings":"Part 1 Bonus 1","what":"Example Output","title":"Solving a word funnel programming challenge","text":"","code":"bonus(\"dragoon\") => [\"dragon\"] bonus(\"boats\") => [\"oats\", \"bats\", \"bots\", \"boas\", \"boat\"] bonus(\"affidavit\") => []"},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"external-datasets","dir":"Articles","previous_headings":"Part 1 Bonus 1","what":"External Datasets","title":"Solving a word funnel programming challenge","text":"get solution, note challenge now references external dataset. enable1 word list ~173k element word list hosted Github. Since referencing data frequently, ergonomic read data R object incorporate project serialized format. yet another advantage using package-oriented project compendium approach. Datasets can associated package accessed using data() function. pattern also supports reproducibility, reproducible research. usethis::use_data_raw(\"enable1\"), R script file created project’s data-raw/ folder. run evermore able load enable1 word list simply executing data(\"enable1\").","code":"# Contents of data-raw/enable1.R enable1_url <- 'https://raw.githubusercontent.com/dolph/dictionary/master/enable1.txt' enable1 <- readLines(enable1_url) usethis::use_data(enable1, overwrite = TRUE)"},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"solution-1","dir":"Articles","previous_headings":"Part 1 Bonus 1","what":"Solution","title":"Solving a word funnel programming challenge","text":"solution. R version. Whoa! ’s lot going ! solution 2 lines (dense) code. ’s stuff? Let’s hold looking solution directly understand component first. R package system lot hiding complexity supporting good documentation practice, makes 2-line solution possible.","code":"#' Part 1 Bonus Question #' #' Create a list of all funnel words that exist in a dictionary. #' #' @param x The word used to create funnel words. #' @param search_func A function to check to see if a candidate word is in the #'    a dictionary. #' @seealso [search_func] #' @examples #' \\dontrun{ #' data(enable1) #' set_search_function <- set_search(enable1) #' pt1_bonus(\"dragoon\", set_search_function) #' } #' @export pt1_bonus <- function(x, search_func) {   # First create all candidate words that would fit the rule   candidates <- x |>     nchar() |>     seq_len() |>     vapply(remove_letter, character(1), strsplit(x, character(0L))[[1]]) |>     unique()    # Subset legal words based on candidates   candidates[vapply(candidates, search_func, logical(1))] }"},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"roxygen-comments","dir":"Articles","previous_headings":"Part 1 Bonus 1 > Solution","what":"Roxygen Comments","title":"Solving a word funnel programming challenge","text":"first thing might notice comments function use #' syntax. comments special. Roxygen comments, compiled package help files. package loaded installed, help file can accessed using ?pt1_bonus just look manual page (manpage) R. single best way document functions R. Roxygen comments particularly helpful parameter function signature whose purpose immediately obvious: search_func. Fortunately, cross-reference another manpage example provide clarity. , using package-oriented project compendium enhanced experience working potentially complex code. NB, public objects (private ones) Roxygen comments. showing document illustrative purposes.","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"support-functions","dir":"Articles","previous_headings":"Part 1 Bonus 1 > Solution","what":"Support Functions","title":"Solving a word funnel programming challenge","text":"next thing might notice several supporting functions built package. already mentioned search_func, manpage part public API (’s visible end-users). also remove_letter() function buried body function definition. utility function visible within package! sorts functions can effective hiding away implementation detail can maintain proper level abstraction solving problem. . e., ’re bogged solving sub-problems distract main problem. NB, supporting functions getting unit tests !","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"back-to-the-solution","dir":"Articles","previous_headings":"Part 1 Bonus 1 > Solution","what":"Back to the Solution","title":"Solving a word funnel programming challenge","text":"first line : ’s using pipe operator pass result expression next expression readable way. pipeline , starting target word getting number characters word creating sequence 1:nchar(x) removing one character original target word index removing duplicates example, x “cats”, pipeline generate: next line returns subset candidate words. Specifically, words found search_func: “cats” example, “cat” returned three candidates real words.","code":"candidates <- x |>   nchar() |>   seq_len() |>   vapply(remove_letter, character(1), strsplit(x, character(0L))[[1]]) |>   unique() \"ats\" \"cts\" \"cas\" \"cat\" candidates[vapply(candidates, search_func, logical(1))]"},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"search-algorithms","dir":"Articles","previous_headings":"Part 1 Bonus 1","what":"Search Algorithms","title":"Solving a word funnel programming challenge","text":"search_func? didn’t just use R’s builtin %% operator instead? go trouble? short answer enable1 dataset big! Using %% prohibitively slow run lot (foreshadowing). %% operator uses linear search algorithm, meaning member candidates vector compared member enable1 vector. Worst case, ’s 4×172823=6912924 \\times 172823 = 691292 comparisons. can reduce number comparisons?","code":"candidates[candidates %in% enable1]"},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"binary-search","dir":"Articles","previous_headings":"Part 1 Bonus 1 > Search Algorithms","what":"Binary Search","title":"Solving a word funnel programming challenge","text":"Since know enable1 sorted (can “trivially”), use binary search. reduce number comparisons per candidate log2, means 18 comparisons worst case. package contains binary_search() function implemented pure R demonstrate . Note function returns function. closure. reason want prep input table (make sure ’s sorted). returning closure, private version enable1 dataset know sorted sorted advance. may performance acceptable can end . using right algorithm, obviated need use exotic Rcpp data structure. let’s confirm . Two data structures may interest since can test membership single comparison (average): hashmaps sets.","code":"binary_search <- function(table) {   table <- sort(table)   function(word) {     lb <- 1L     ub <- length(table)      while (lb != ub) {       mid <- sum(c(ub, lb) - 1L) %/% 2L + 1L       # message(\"lb: \", lb, \", ub: \", ub, \", mid: \", mid)       if (word == table[mid]) {         return(TRUE)       } else if (word > table[mid]) {         lb <- mid + 1L       } else {         ub <- mid - 1L       }     }      word == table[lb]   } }"},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"hash-table","dir":"Articles","previous_headings":"Part 1 Bonus 1 > Search Algorithms","what":"Hash Table","title":"Solving a word funnel programming challenge","text":"R 4.2.0, builtin hashtab() function allows us work hashmaps right R without needing use C++ STL. package implemented search function hashtab_search().","code":"hashtab_search <- function(table) {   h <- hashtab(size = length(table))   for (e in table) sethash(h, e, TRUE)   function(word) gethash(h, word, FALSE) }"},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"set","dir":"Articles","previous_headings":"Part 1 Bonus 1 > Search Algorithms","what":"Set","title":"Solving a word funnel programming challenge","text":"builtin set data type R. set_search() function, need enlist Rcpp. case, create C++ std::unordered_set<std::string> pass around wrapping Rcpp::Xptr. search function quite simple. another advantage using closures: can hide gory details creating Xptr. Now, set_contains() can remain private function (Rcpp), don’t explain end-user Xptr must create first remember pass set_contains(). lot background knowledge need communicated documentation add much solving primary problem testing membership set.","code":"XPtr<std::unordered_set<std::string>> initialize_set(const std::vector<std::string> &s) {   std::unordered_set<std::string>* uset =     new std::unordered_set<std::string>(s.begin(), s.end());   XPtr<std::unordered_set<std::string>> xptr(uset, true);   return xptr; } set_search <- function(table) {   table <- initialize_set(table)   function(word) set_contains(word, table) }"},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"benchmark","dir":"Articles","previous_headings":"Part 1 Bonus 1 > Search Algorithms","what":"Benchmark","title":"Solving a word funnel programming challenge","text":"Now ’ve covered theory(?) various benefits search function, let’s confirm intuition benchmark. binary search 45 times faster naive linear search, set hashmap 200x faster. may come surprise hashmap comparable much complicated set implementation. performance, can use R builtin save trouble extra complication Rcpp. However, hashtab() function relatively new still experimental phase; possible set may still necessary, depending target environment. another reminder Rcpp powerful tool always necessary. fact, many cases, pure R binary search solution may fast enough. However, one exhaustive search 173k words enable1 list, performance matters. difference hours seconds runtime. great segue next challenge.","code":"data(enable1)  seq_s <- sequential_search(enable1) bin_s <- binary_search(enable1) hash_s <- hashtab_search(enable1) set_s <- set_search(enable1)  bench::mark(   pt1_bonus(\"cats\", seq_s),   pt1_bonus(\"cats\", bin_s),   pt1_bonus(\"cats\", hash_s),   pt1_bonus(\"cats\", set_s) ) #> # A tibble: 4 × 6 #>   expression                         min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                    <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 \"pt1_bonus(\\\"cats\\\", seq_s)\"    2.71ms   2.93ms      320.    5.29MB    47.5  #> 2 \"pt1_bonus(\\\"cats\\\", bin_s)\"  100.18µs 110.07µs     8041.        0B    11.9  #> 3 \"pt1_bonus(\\\"cats\\\", hash_s)\"  24.91µs  27.53µs    34090.    2.69KB    10.2  #> 4 \"pt1_bonus(\\\"cats\\\", set_s)\"   25.06µs  27.98µs    32908.    2.38KB     9.88"},{"path":[]},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"prompt-2","dir":"Articles","previous_headings":"Part 1 Bonus 2","what":"Prompt","title":"Solving a word funnel programming challenge","text":"Given input word enable1, largest number words can returned bonus(word) 5. One input “boats”. 28 inputs total. Find .","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"solution-2","dir":"Articles","previous_headings":"Part 1 Bonus 2","what":"Solution","title":"Solving a word funnel programming challenge","text":"good foundation built previous challenge, straightforward. solution subsets enable1 database include words 5 characters otherwise tricks. micro-optimizations attempted runs sufficiently quickly . ’s 17s laptop.","code":"pt1_bonus2 <- function(table, search_func) {   qualifying_words <- table[nchar(table) >= 5L]   candidates <- lapply(qualifying_words, pt1_bonus, search_func)   matches <- lengths(candidates) == 5L   qualifying_words[matches] }"},{"path":[]},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"prompt-3","dir":"Articles","previous_headings":"Part 2","what":"Prompt","title":"Solving a word funnel programming challenge","text":"word funnel series words formed removing one letter time starting word, keeping remaining letters order. purpose challenge, word defined entry enable1 word list. example word funnel : word funnel length 4, 4 words .","code":"gnash => gash => ash => ah"},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"example-output-2","dir":"Articles","previous_headings":"Part 2","what":"Example Output","title":"Solving a word funnel programming challenge","text":"","code":"funnel2(\"gnash\") => 4 funnel2(\"princesses\") => 9 funnel2(\"turntables\") => 5 funnel2(\"implosive\") => 1 funnel2(\"programmer\") => 2"},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"solution-3","dir":"Articles","previous_headings":"Part 2","what":"Solution","title":"Solving a word funnel programming challenge","text":"solutions build . can see, using pt1_bonus() get valid funnel words step.","code":"r_funnel2 <- function(x, search_func) {   loop <- function(x, depth = 1L)     x |>       pt1_bonus(search_func) |>       vapply(loop, integer(1), depth = depth + 1L) |>       max(depth)   loop(x) }"},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"recursion","dir":"Articles","previous_headings":"Part 2","what":"Recursion","title":"Solving a word funnel programming challenge","text":"new concept note use recursion. Since need step possible branch funnel see longest, recursion natural choice solve problem concisely. Recursive functions often wrapper around function signatures friendly user. outer function signature, user specifies root word search function used. However, inner function (loop() go() convention) needs know current word tested current depth tree.","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"tail-call-optimization","dir":"Articles","previous_headings":"Part 2 > Recursion","what":"Tail Call Optimization","title":"Solving a word funnel programming challenge","text":"One pitfall recursive algorithms potential stack overflows traversing deeply branches. issue can expect shallow depth; something aware , especially ’d like implement infinite loop using recursion. R function prevents stack overflows tail call optimization (Tailcall()). recursive function needs meet certain conditions particular function candidate. ’s good tool keep back pocket. example Tailcall() usage Conway’s Game Life package example come handy creating infinite loops.","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"rcpp","dir":"Articles","previous_headings":"Part 2","what":"Rcpp","title":"Solving a word funnel programming challenge","text":"Rcpp solution looks similar without functional elements. tend prefer R version acknowledge may excessively terse. Note opted make support function make_all_funnel_words() keep function body getting cluttered.","code":"int cpp_funnel2(     const std::string &x,     const XPtr<std::unordered_set<std::string>> wordset ) {   int depth = 1;   for (const auto &s : make_all_funnel_words(x))     if (wordset->count(s) == 1)       depth = std::max(depth, cpp_funnel2(s, wordset) + 1);   return depth; } std::unordered_set<std::string> make_all_funnel_words(const std::string &s) {   if (s.size() < 2)     return {};    std::unordered_set<std::string> set(s.size());   for (size_t i = 0, len = s.size(); i < len; i++) {     set.insert(s.substr(0, i) + s.substr(i + 1, len - i));   }    return set; }"},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"benchmark-1","dir":"Articles","previous_headings":"Part 2","what":"Benchmark","title":"Solving a word funnel programming challenge","text":"benchmark shows 84x speed difference two, make Rcpp preferred choice another exhaustive search exercise.","code":"word_set <- initialize_set(enable1)  bench::mark(   r_funnel2(\"princesses\", hash_s),   cpp_funnel2(\"princesses\", word_set) ) #> # A tibble: 2 × 6 #>   expression                            min  median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                        <bch:t> <bch:t>     <dbl> <bch:byt>    <dbl> #> 1 \"r_funnel2(\\\"princesses\\\", hash_…  1.16ms  1.31ms      728.    7.23KB     11.2 #> 2 \"cpp_funnel2(\\\"princesses\\\", wor… 18.93µs 19.82µs    46096.    2.38KB      0"},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"python","dir":"Articles","previous_headings":"Part 2","what":"Python","title":"Solving a word funnel programming challenge","text":"comparison’s sake, ’ll look Python solution originally made. looks similar C++ version. due string slicing set intersection operator, need create make_all_funnel_words() support function. might room optimization well. Although set intersection operator & offers succinct syntax , ’d want examine impact algorithmic complexity—efficient way remove invalid words step (using condition set comprehension). found sufficiently fast time, worth trade-simplicity implementation.","code":"def funnel2(word):     max_depth = 1     candidates = {word[:i] + word[(i+1):] for i in range(len(word))} & WORDS     for candidate in candidates:         max_depth = max(funnel2(candidate) + 1, max_depth)     return max_depth"},{"path":[]},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"prompt-4","dir":"Articles","previous_headings":"Part 2 Bonus","what":"Prompt","title":"Solving a word funnel programming challenge","text":"Find one word word list starts funnel length 10.","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"solution-4","dir":"Articles","previous_headings":"Part 2 Bonus","what":"Solution","title":"Solving a word funnel programming challenge","text":"much note . early exit matters, loop instead vectorized. write C++ loop iterate enough times won’t really matter (suspect). use C++ funnel function though.","code":"pt2_bonus <- function(words, wordset)     for (word in words)       if (nchar(word) > 10L && cpp_funnel2(word, wordset) == 10L)         return(word)"},{"path":[]},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"prompt-5","dir":"Articles","previous_headings":"Part 2 Bonus 2","what":"Prompt","title":"Solving a word funnel programming challenge","text":"bonus, allowed remove one letter single step word funnel. instance, may step sideboard sidebar removing o final d single step. modified rule, ’s possible get funnel length 12:","code":"preformationists => preformationist => preformations => reformations => reformation => formation => oration => ration => ratio => rato => rat => at"},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"solution-5","dir":"Articles","previous_headings":"Part 2 Bonus 2","what":"Solution","title":"Solving a word funnel programming challenge","text":"multiple deletions can happen step, need make new supporting function generate candidate words. Now, use recursion almost exactly cpp_funnel2(). One difference created wrapper function simplify signature final integer comparison determine depth 12.","code":"std::vector<std::string> make_all_funnel_words_any_depth(   const std::string &s,   const XPtr<std::unordered_set<std::string>> wordset,   int depth ) {   int word_len = s.size() - 1;   std::vector<std::string> final;   auto prev = make_all_funnel_words(s);   auto pred = [wordset](const std::string &str){return wordset->count(str) == 1;};    while (word_len > 1 && depth + word_len > 10) {     std::unordered_set<std::string> curr(--word_len);     for (const auto &word : prev) {       auto tmp = make_all_funnel_words(word);       std::move(tmp.begin(), tmp.end(), std::inserter(curr, curr.end()));     }     std::copy_if(prev.begin(), prev.end(), std::back_inserter(final), pred);     prev = std::move(curr);   }   return final; } int pt2_bonus2_loop(     const std::string &x,     const XPtr<std::unordered_set<std::string>> wordset,     int depth = 1 ) {   int max_depth = depth;   for (const auto &word : make_all_funnel_words_any_depth(x, wordset, depth))     max_depth = std::max(max_depth, pt2_bonus2_loop(word, wordset, depth + 1));   return max_depth; }  bool pt2_bonus2(     const std::string &x,     const XPtr<std::unordered_set<std::string>> wordset ) {   return pt2_bonus2_loop(x, wordset) == 12; }"},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"python-1","dir":"Articles","previous_headings":"Part 2 Bonus 2 > Solution","what":"Python","title":"Solving a word funnel programming challenge","text":"also solved bonus Python long time ago. find much easier write shorter runtime C++ solution. ease writing can attributed itertools library (personal favorite), rich set API, string slicing facilities Python. also able run several cores since assignment embarassingly parallel.","code":"from itertools import combinations   def bonus2(word, depth=1):     max_depth = depth     candidates = set()     i = len(word) - 1     while i > 1 and i + depth > 10:         candidates.update(             {''.join(c) for c in combinations(word, i)} & WORDS)         i -= 1     for candidate in candidates:         max_depth = max(bonus2(candidate, depth + 1), max_depth)     return max_depth   assert bonus2(\"preformationists\") == 12 import multiprocessing as mp   def _check(word):     if bonus2(word) == 12:         return word     return None  # Explicit for clarity   def run_bonus2():     found = []     words = (w for w in WORDS if len(w) > 12)      with mp.Pool(mp.cpu_count()) as pool:         for word in pool.imap_unordered(_check, words):             if word is None:                 continue             found.append(word)             if len(found) == 6:                 return found"},{"path":"https://github.com/pegeler/dailyprogrammer/articles/funnel.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Solving a word funnel programming challenge","text":"Rcpp powerful tool R programmers speed important. However, exploring algorithmic optimizations base R functionality discounted. Frequently, using Rcpp unnecessary, especially working R’s strength domains (numeric computation graphics). Trying several methods measuring performance real data using benchmarks important part process considering whether Rcpp right tool job. Non-technical factors, intended audience expected lifetime code also play role decision whether use Rcpp. Package-based project compendia augment problem solving several ways. Chief among maintaining desired level abstraction focus always remains immediate solution. Compendium packages shareable unit distribution takes full advantage R’s builtin package management system, including dependency management, automated unit tests checks, documentation, write-ups (vignettes), external data management, build compilation tools configuration. Packages also enforce standardized scaffolding code organization. promotes reproducibility.","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Paul Egeler. Author, maintainer.","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Egeler P (2024). funnel: Rcpp solution Daily Programmer 366 Word Funnel. R package version 0.0.0, https://github.com/pegeler/dailyprogrammer.","code":"@Manual{,   title = {funnel: Rcpp solution to Daily Programmer 366 Word Funnel},   author = {Paul Egeler},   year = {2024},   note = {R package version 0.0.0},   url = {https://github.com/pegeler/dailyprogrammer}, }"},{"path":[]},{"path":"https://github.com/pegeler/dailyprogrammer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Rcpp solution to Daily Programmer 366 Word Funnel","text":"","code":"if (!requireNamespace(\"remotes\", quietly = TRUE)) install.packages(\"remotes\") remotes::install_github(\"pegeler/dailyprogrammer/366-word-funnel-r-pkg\")"},{"path":[]},{"path":"https://github.com/pegeler/dailyprogrammer/index.html","id":"challenge","dir":"","previous_headings":"[2018-08-20] Challenge #366 [Easy] Word funnel 1","what":"Challenge","title":"Rcpp solution to Daily Programmer 366 Word Funnel","text":"Given two strings letters, determine whether second can made first removing one letter. remaining letters must stay order. Examples","code":"funnel(\"leave\", \"eave\") => true funnel(\"reset\", \"rest\") => true funnel(\"dragoon\", \"dragon\") => true funnel(\"eave\", \"leave\") => false funnel(\"sleet\", \"lets\") => false funnel(\"skiff\", \"ski\") => false"},{"path":"https://github.com/pegeler/dailyprogrammer/index.html","id":"optional-bonus-1","dir":"","previous_headings":"[2018-08-20] Challenge #366 [Easy] Word funnel 1","what":"Optional bonus 1","title":"Rcpp solution to Daily Programmer 366 Word Funnel","text":"Given string, find words enable1 word list can made removing one letter string. two possible letters can remove make word, count . Ordering output words doesn’t matter.","code":"bonus(\"dragoon\") => [\"dragon\"] bonus(\"boats\") => [\"oats\", \"bats\", \"bots\", \"boas\", \"boat\"] bonus(\"affidavit\") => []"},{"path":"https://github.com/pegeler/dailyprogrammer/index.html","id":"optional-bonus-2","dir":"","previous_headings":"[2018-08-20] Challenge #366 [Easy] Word funnel 1","what":"Optional bonus 2","title":"Rcpp solution to Daily Programmer 366 Word Funnel","text":"Given input word enable1, largest number words can returned bonus(word) 5. One input \"boats\". 28 inputs total. Find . Ideally can without comparing every word list every word list. good time around second. Possibly less, depending language platform choice - Python slower C faster. point hit specific run time, just much faster checking every pair words.","code":""},{"path":[]},{"path":"https://github.com/pegeler/dailyprogrammer/index.html","id":"challenge-1","dir":"","previous_headings":"[2018-08-22] Challenge #366 [Intermediate] Word funnel 2","what":"Challenge","title":"Rcpp solution to Daily Programmer 366 Word Funnel","text":"word funnel series words formed removing one letter time starting word, keeping remaining letters order. purpose challenge, word defined entry enable1 word list. example word funnel : word funnel length 4, 4 words . Given word, determine length longest word funnel starts. may optionally also return funnel (funnel tied longest, case tie). Examples","code":"gnash => gash => ash => ah funnel2(\"gnash\") => 4 funnel2(\"princesses\") => 9 funnel2(\"turntables\") => 5 funnel2(\"implosive\") => 1 funnel2(\"programmer\") => 2"},{"path":"https://github.com/pegeler/dailyprogrammer/index.html","id":"optional-bonus-1-1","dir":"","previous_headings":"[2018-08-22] Challenge #366 [Intermediate] Word funnel 2","what":"Optional bonus 1","title":"Rcpp solution to Daily Programmer 366 Word Funnel","text":"Find one word word list starts funnel length 10.","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/index.html","id":"optional-bonus-2-1","dir":"","previous_headings":"[2018-08-22] Challenge #366 [Intermediate] Word funnel 2","what":"Optional bonus 2","title":"Rcpp solution to Daily Programmer 366 Word Funnel","text":"bonus, allowed remove one letter single step word funnel. instance, may step sideboard sidebar removing o final d single step. modified rule, ’s possible get funnel length 12: preformationists one six words begin modified funnel length 12. Find five words.","code":"preformationists => preformationist => preformations => reformations => reformation => formation => oration => ration => ratio => rato => rat => at"},{"path":"https://github.com/pegeler/dailyprogrammer/reference/enable1.html","id":null,"dir":"Reference","previous_headings":"","what":"The enable1 Word List — enable1","title":"The enable1 Word List — enable1","text":"enable1 Word List","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/reference/enable1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The enable1 Word List — enable1","text":"","code":"enable1"},{"path":"https://github.com/pegeler/dailyprogrammer/reference/enable1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The enable1 Word List — enable1","text":"object class character length 172823.","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/reference/enable1.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"The enable1 Word List — enable1","text":"https://raw.githubusercontent.com/dolph/dictionary/master/enable1.txt","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/reference/funnel.html","id":null,"dir":"Reference","previous_headings":"","what":"Part 1 Word Funnel — cpp_funnel","title":"Part 1 Word Funnel — cpp_funnel","text":"Part 1 Word Funnel","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/reference/funnel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Part 1 Word Funnel — cpp_funnel","text":"","code":"cpp_funnel(a, b)  r_funnel(a, b)"},{"path":"https://github.com/pegeler/dailyprogrammer/reference/funnel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Part 1 Word Funnel — cpp_funnel","text":"base word b candidate word","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/reference/funnel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Part 1 Word Funnel — cpp_funnel","text":"logical indicating can go b","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/reference/funnel2.html","id":null,"dir":"Reference","previous_headings":"","what":"Part 2 Word Funnel — cpp_funnel2","title":"Part 2 Word Funnel — cpp_funnel2","text":"Find maximum depth word funnel.","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/reference/funnel2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Part 2 Word Funnel — cpp_funnel2","text":"","code":"cpp_funnel2(x, wordset)  r_funnel2(x, search_func)"},{"path":"https://github.com/pegeler/dailyprogrammer/reference/funnel2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Part 2 Word Funnel — cpp_funnel2","text":"x word test. wordset enable1 list external pointer C++ unordered set. search_func function check see word valid.","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/reference/initialize_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an External Pointer to a C++ Unordered Set — initialize_set","title":"Create an External Pointer to a C++ Unordered Set — initialize_set","text":"Create External Pointer C++ Unordered Set","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/reference/initialize_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an External Pointer to a C++ Unordered Set — initialize_set","text":"","code":"initialize_set(s)"},{"path":"https://github.com/pegeler/dailyprogrammer/reference/initialize_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an External Pointer to a C++ Unordered Set — initialize_set","text":"s character vector used set.","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/reference/pt1_bonus.html","id":null,"dir":"Reference","previous_headings":"","what":"Part 1 Bonus — pt1_bonus","title":"Part 1 Bonus — pt1_bonus","text":"Create list funnel words exist dictionary.","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/reference/pt1_bonus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Part 1 Bonus — pt1_bonus","text":"","code":"pt1_bonus(x, search_func)"},{"path":"https://github.com/pegeler/dailyprogrammer/reference/pt1_bonus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Part 1 Bonus — pt1_bonus","text":"x word used create funnel words. search_func function check see candidate word dictionary.","code":""},{"path":[]},{"path":"https://github.com/pegeler/dailyprogrammer/reference/pt1_bonus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Part 1 Bonus — pt1_bonus","text":"","code":"if (FALSE) { # \\dontrun{ data(enable1) set_search_function <- set_search(enable1) pt1_bonus(\"dragoon\", set_search_function) } # }"},{"path":"https://github.com/pegeler/dailyprogrammer/reference/pt1_bonus2.html","id":null,"dir":"Reference","previous_headings":"","what":"Part 1 Bonus 2 — pt1_bonus2","title":"Part 1 Bonus 2 — pt1_bonus2","text":"Find words enable1 dictionary contains 5 legal funnel words.","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/reference/pt1_bonus2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Part 1 Bonus 2 — pt1_bonus2","text":"","code":"pt1_bonus2(table, search_func)"},{"path":"https://github.com/pegeler/dailyprogrammer/reference/pt1_bonus2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Part 1 Bonus 2 — pt1_bonus2","text":"table character vector dictionary words. (. e., enable1) search_func function check see candidate word dictionary.","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/reference/pt2_bonus.html","id":null,"dir":"Reference","previous_headings":"","what":"Part 2 Bonus — pt2_bonus","title":"Part 2 Bonus — pt2_bonus","text":"Find word funnel depth 10","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/reference/pt2_bonus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Part 2 Bonus — pt2_bonus","text":"","code":"pt2_bonus(words, wordset)"},{"path":"https://github.com/pegeler/dailyprogrammer/reference/pt2_bonus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Part 2 Bonus — pt2_bonus","text":"words enable1 list character vector. wordset enable1 list external pointer C++ unordered set.","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/reference/pt2_bonus2.html","id":null,"dir":"Reference","previous_headings":"","what":"Part 2 Bonus 2 — pt2_bonus2","title":"Part 2 Bonus 2 — pt2_bonus2","text":"Find depth word funnel 12 one letter can skipped single step.","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/reference/pt2_bonus2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Part 2 Bonus 2 — pt2_bonus2","text":"","code":"pt2_bonus2(x, wordset)"},{"path":"https://github.com/pegeler/dailyprogrammer/reference/pt2_bonus2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Part 2 Bonus 2 — pt2_bonus2","text":"x word test. wordset list valid words external pointer C++ unordered set.","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/reference/search_func.html","id":null,"dir":"Reference","previous_headings":"","what":"Search Functions — search_func","title":"Search Functions — search_func","text":"Create closure search dictionary presence word.","code":""},{"path":"https://github.com/pegeler/dailyprogrammer/reference/search_func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search Functions — search_func","text":"","code":"sequential_search(table)  binary_search(table)  set_search(table)  hashtab_search(table)"},{"path":"https://github.com/pegeler/dailyprogrammer/reference/search_func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search Functions — search_func","text":"table character vector dictionary words.","code":""}]
